// bot.js
const TelegramBot = require("node-telegram-bot-api");
const admin = require("firebase-admin");
const fs = require("fs");

const TOKEN = "8252256697:AAGJ3iASEPtRe3hJ-1LBtGCYC_1MaD2cbFw";
const ADMIN_CHAT_ID = "1045691567"; // üîπ –¢–≤–æ–π ID
const bot = new TelegramBot(TOKEN, { polling: true });

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase Admin
if (!admin.apps.length) {
  const serviceAccount = require("./serviceAccountKey.json"); // üîπ JSON –∫–ª—é—á –∏–∑ Firebase
  admin.initializeApp({
    credential: admin.credential.cert(serviceAccount),
  });
}

const db = admin.firestore();

// ‚úÖ –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç–∞
bot.onText(/\/start/, (msg) => {
  bot.sendMessage(
    msg.chat.id,
    `–ü—Ä–∏–≤–µ—Ç, ${msg.from.first_name}!\n` +
      `–ß—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –±–∏–ª–µ—Ç –ø—Ä–µ–º–∏—É–º, –æ—Ç–ø—Ä–∞–≤—å –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n` +
      `/premium TicketID`
  );
});

// ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–µ–º–∏—É–º
bot.onText(/\/premium (.+)/, async (msg, match) => {
  const chatId = msg.chat.id;
  const ticketId = match[1].trim();

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∏–ª–µ—Ç
  try {
    const ticketRef = db.collection("tickets").doc(ticketId);
    const ticketDoc = await ticketRef.get();

    if (!ticketDoc.exists) {
      return bot.sendMessage(chatId, "‚ùå –ë–∏–ª–µ—Ç —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.");
    }

    const ticket = ticketDoc.data();

    if (ticket.premium) {
      return bot.sendMessage(chatId, "üåü –≠—Ç–æ—Ç –±–∏–ª–µ—Ç —É–∂–µ –ø—Ä–µ–º–∏—É–º.");
    }

    bot.sendMessage(
      chatId,
      `–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞ –æ–± –æ–ø–ª–∞—Ç–µ –¥–ª—è –±–∏–ª–µ—Ç–∞ ID: ${ticketId}`
    );

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∂–¥–µ—Ç –ø—Ä–µ–º–∏—É–º
    await ticketRef.update({ premiumPending: true, premiumUserChat: chatId });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∏–ª–µ—Ç–∞:", error);
    bot.sendMessage(chatId, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∏–ª–µ—Ç–∞.");
  }
});

// ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ —á–µ–∫–∞
bot.on("photo", async (msg) => {
  const chatId = msg.chat.id;
  const photos = msg.photo;
  if (!photos || photos.length === 0) return;

  const fileId = photos[photos.length - 1].file_id;

  // –ò—â–µ–º –±–∏–ª–µ—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤ –æ–∂–∏–¥–∞–Ω–∏–∏ –ø—Ä–µ–º–∏—É–º–∞
  const pendingTickets = await db
    .collection("tickets")
    .where("premiumPending", "==", true)
    .where("premiumUserChat", "==", chatId)
    .get();

  if (pendingTickets.empty) {
    return bot.sendMessage(chatId, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –±–∏–ª–µ—Ç–æ–≤ –≤ –æ–∂–∏–¥–∞–Ω–∏–∏ –ø—Ä–µ–º–∏—É–º–∞.");
  }

  // –ë–µ—Ä—ë–º –ø–µ—Ä–≤—ã–π –±–∏–ª–µ—Ç
  const ticketDoc = pendingTickets.docs[0];
  const ticketId = ticketDoc.id;

  bot.sendMessage(
    chatId,
    "‚úÖ –ß–µ–∫ –ø–æ–ª—É—á–µ–Ω, –æ–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
  );

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–¥–º–∏–Ω—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
  bot.sendPhoto(ADMIN_CHAT_ID, fileId, {
    caption: `–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–µ–º–∏—É–º\nTicketID: ${ticketId}\n–û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @${
      msg.from.username || msg.from.first_name
    }`,
    reply_markup: {
      inline_keyboard: [
        [
          {
            text: "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
            callback_data: `approve_${encodeURIComponent(ticketId)}_${chatId}`,
          },
          {
            text: "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",
            callback_data: `reject_${chatId}`,
          },
        ],
      ],
    },
  });
});

// ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
bot.on("callback_query", async (query) => {
  const data = query.data;

  try {
    if (data.startsWith("approve_")) {
      const parts = data.split("_");
      const ticketId = decodeURIComponent(parts[1]);
      const userChatId = parts[2];

      await db.collection("tickets").doc(ticketId).update({
        premium: true,
        premiumPending: false,
      });

      bot.sendMessage(userChatId, "üåü –í–∞—à –±–∏–ª–µ—Ç –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –≤ –ø—Ä–µ–º–∏—É–º!");
      bot.sendMessage(query.message.chat.id, "‚úÖ –ü—Ä–µ–º–∏—É–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω.");
    }

    if (data.startsWith("reject_")) {
      const userChatId = data.split("_")[1];
      bot.sendMessage(userChatId, "‚ùå –í–∞—à –±–∏–ª–µ—Ç –Ω–µ –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É.");
      bot.sendMessage(query.message.chat.id, "–ë–∏–ª–µ—Ç –æ—Ç–∫–ª–æ–Ω—ë–Ω.");
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback:", error);
  }
});
