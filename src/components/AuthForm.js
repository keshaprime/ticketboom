// src/components/AuthForm.js
import React, { useState } from "react";
import { auth } from "../firebase";
import {
  createUserWithEmailAndPassword,
  signInWithEmailAndPassword,
  sendEmailVerification,
  signOut,
} from "firebase/auth";
import { useNavigate } from "react-router-dom";
import "./AuthForm.css";

export default function AuthForm() {
  const [isRegister, setIsRegister] = useState(false);
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [status, setStatus] = useState("");
  const [loading, setLoading] = useState(false);
  const navigate = useNavigate();

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    setStatus("");

    try {
      if (isRegister) {
        // üëâ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
        const userCredential = await createUserWithEmailAndPassword(
          auth,
          email,
          password
        );
        const user = userCredential.user;

        // üëâ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏—Å—å–º–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        await sendEmailVerification(user);
        setStatus("üì© –ù–∞ –≤–∞—à—É –ø–æ—á—Ç—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–∏—Å—å–º–æ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è!");

        // üëâ —Å—Ä–∞–∑—É –≤—ã—Ö–æ–¥–∏–º –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞, —á—Ç–æ–±—ã —é–∑–µ—Ä –Ω–µ –ø–æ–ø–∞–ª –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        await signOut(auth);
      } else {
        // üëâ –≤—Ö–æ–¥
        const userCredential = await signInWithEmailAndPassword(
          auth,
          email,
          password
        );
        const user = userCredential.user;

        if (!user.emailVerified) {
          setStatus("‚ö†Ô∏è –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–æ—á—Ç—É –ø–µ—Ä–µ–¥ –≤—Ö–æ–¥–æ–º!");
          await signOut(auth);
          return;
        }

        setStatus("‚úÖ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!");
        navigate("/"); // –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ email –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω
      }
    } catch (err) {
      setStatus("‚ùå –û—à–∏–±–∫–∞: " + err.message);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className='auth-container'>
      <div className='auth-box'>
        <h2>{isRegister ? "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è" : "–í—Ö–æ–¥"}</h2>
        <form onSubmit={handleSubmit}>
          <input
            type='email'
            placeholder='–í–≤–µ–¥–∏—Ç–µ email'
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            required
          />

          <input
            type='password'
            placeholder='–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å'
            value={password}
            onChange={(e) => setPassword(e.target.value)}
            required
          />

          <button type='submit' disabled={loading}>
            {loading
              ? "–ó–∞–≥—Ä—É–∑–∫–∞..."
              : isRegister
              ? "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è"
              : "–í–æ–π—Ç–∏"}
          </button>
        </form>

        <p className='switch'>
          {isRegister ? "–£–∂–µ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç?" : "–ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞?"}{" "}
          <span onClick={() => setIsRegister(!isRegister)}>
            {isRegister ? "–í–æ–π—Ç–∏" : "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"}
          </span>
        </p>

        {status && <p className='status'>{status}</p>}
      </div>
    </div>
  );
}
